{"version":3,"sources":["webpack:///./ngStoreClient/$_lazy_route_resource lazy namespace object","webpack:///./ngStoreClient/app/app.component.html","webpack:///./ngStoreClient/app/app.component.ts","webpack:///./ngStoreClient/app/app.module.ts","webpack:///./ngStoreClient/app/product/productList.component.html","webpack:///./ngStoreClient/app/product/productList.component.ts","webpack:///./ngStoreClient/app/services/productService.ts","webpack:///./ngStoreClient/environments/environment.ts","webpack:///./ngStoreClient/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,sF;;;;;;;;;;;ACZA,uFAAuF,SAAS,2E;;;;;;;;;;;;;;;;;ACAtD;AAO1C;IALA;QAME,UAAK,GAAG,UAAU,CAAC;IACrB,CAAC;IAFY,YAAY;QALxB,+DAAS,CAAC;YACT,QAAQ,EAAE,cAAc;YACxB,mGAAmC;SAEpC,CAAC;OACW,YAAY,CAExB;IAAD,mBAAC;CAAA;AAFwB;;;;;;;;;;;;;;;;;;;;;;;;ACPiC;AACjB;AACO;AACQ;AAET;AACe;AACH;AAiB3D;IAAA;IAAyB,CAAC;IAAb,SAAS;QAfrB,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACV,2DAAY;gBACZ,0EAAW;aACd;YACD,OAAO,EAAE;gBACP,uEAAa;gBACb,qEAAgB;aACjB;YACC,SAAS,EAAE;gBACP,EAAE,OAAO,EAAE,6DAAa,EAAE,QAAQ,EAAE,gBAAgB,EAAE;gBACtD,uEAAc;aACjB;YACD,SAAS,EAAE,CAAC,2DAAY,CAAC;SAC5B,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;;;;ACxBtB,wjCAAwjC,eAAe,2CAA2C,WAAW,2CAA2C,wBAAwB,2CAA2C,gBAAgB,8IAA8I,2CAA2C,2R;;;;;;;;;;;;;;;;;;ACAj4C;AAGS;AAO5D;IAGI,qBAAoB,WAA2B;QAA3B,gBAAW,GAAX,WAAW,CAAgB;QAFxC,aAAQ,GAAc,EAAE,CAAC;IAGhC,CAAC;IAED,8BAAQ,GAAR;QAAA,iBAQC;QAPG,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE;aACzB,SAAS,CAAC,iBAAO;YACd,IAAI,OAAO,EAAE;gBACT,KAAI,CAAC,QAAQ,GAAG,KAAI,CAAC,WAAW,CAAC,QAAQ,CAAC;aAC7C;QACL,CAAC,CAAC,CAAC;IAEX,CAAC;IAdQ,WAAW;QALvB,+DAAS,CAAC;YACP,QAAQ,EAAE,cAAc;YACxB,2HAAyC;SAE5C,CAAC;+EAImC,uEAAc;OAHtC,WAAW,CAevB;IAAD,kBAAC;CAAA;AAfuB;;;;;;;;;;;;;;;;;;;;ACVwC;AACrB;AAEN;AAKrC;IAII,wBAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAF7B,aAAQ,GAAc,EAAE,CAAC;IAIhC,CAAC;IAED,oCAAW,GAAX;QAAA,iBAOC;QANG,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC;aAChC,IAAI,CACD,0DAAG,CAAC,UAAC,IAAW;YACZ,KAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;YACrB,OAAO,IAAI,CAAC;QAChB,CAAC,CAAC,CAAC,CAAC;IAChB,CAAC;IAfQ,cAAc;QAD1B,gEAAU,EAAE;+EAKiB,+DAAU;OAJ3B,cAAc,CAgB1B;IAAD,qBAAC;CAAA;AAhB0B;;;;;;;;;;;;;ACR3B;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAC4B;AAE9B;AACY;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAlB,CAAkB,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./ngStoreClient/$$_lazy_route_resource lazy recursive\";","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-9\\\">\\r\\n        <h3>{{ title }}</h3>\\r\\n        <product-list></product-list>\\r\\n    </div>\\r\\n</div>\\r\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'ngStore-root',\n  templateUrl: \"./app.component.html\",\n  styles: []\n})\nexport class AppComponent {\n  title = 'Products';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { APP_BASE_HREF } from '@angular/common';\nimport { HttpClientModule } from \"@angular/common/http\";\n\nimport { AppComponent } from \"./app.component\";\nimport { ProductList } from \"./product/productList.component\";\nimport { ProductService } from \"./services/productService\";\n\n@NgModule({\n  declarations: [\n      AppComponent,\n      ProductList\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule\n  ],\n    providers: [\n        { provide: APP_BASE_HREF, useValue: '/ngStoreClient' },\n        ProductService\n    ],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"<div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-12\\\">\\r\\n            <div class=\\\"table-responsive\\\">\\r\\n                <table class=\\\"table table-striped\\\">\\r\\n                    <thead>\\r\\n                        <tr>\\r\\n                            <th scope=\\\"col\\\"> </th>\\r\\n                            <th scope=\\\"col\\\">Product</th>\\r\\n                            <th scope=\\\"col\\\">Package</th>\\r\\n                            <th scope=\\\"col\\\">Supplier</th>\\r\\n                            <th scope=\\\"col\\\">Available</th>\\r\\n                            <th scope=\\\"col\\\" class=\\\"text-center\\\">Quantity</th>\\r\\n                            <th scope=\\\"col\\\" class=\\\"text-right\\\">Price</th>\\r\\n                            <th> </th>\\r\\n                        </tr>\\r\\n                    </thead>\\r\\n                    <tbody>\\r\\n                        <tr *ngFor=\\\"let p of products\\\"> \\r\\n                            <td><img src=\\\"https://dummyimage.com/50x50/55595c/fff\\\" /> </td>\\r\\n                            <td>{{p.productName}}</td>\\r\\n                            <td>{{p.package}}</td>\\r\\n                            <td>{{p.supplier.companyName}}</td>\\r\\n                            <td>{{p.Discontinued}}</td>\\r\\n                            <td><input class=\\\"form-control\\\" type=\\\"text\\\" value=\\\"1\\\" /></td>\\r\\n                            <td>{{p.unitPrice | currency:\\\"USD\\\":\\\"symbol\\\"}}</td>\\r\\n                            <td class=\\\"text-right\\\"><button class=\\\"btn btn-sm btn-success\\\">Buy</button> </td>\\r\\n                        </tr>\\r\\n                    </tbody>\\r\\n                </table>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\"","﻿import { Component, OnInit } from \"@angular/core\";\r\n\r\nimport { Product } from './product';\r\nimport { ProductService } from '../services/productService';\r\n\r\n@Component({\r\n    selector: \"product-list\",\r\n    templateUrl: \"productList.component.html\",\r\n    styleUrls: []\r\n})\r\nexport class ProductList implements OnInit {\r\n    public products: Product[] = [];\r\n\r\n    constructor(private dataService: ProductService) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.dataService.getProducts()\r\n            .subscribe(success => {\r\n                if (success) {\r\n                    this.products = this.dataService.products;\r\n                }\r\n            });\r\n\r\n    }\r\n}\r\n","﻿import { HttpClient, HttpHeaders } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs\"\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { Product } from '../product/product';\r\n\r\n@Injectable()\r\nexport class ProductService {\r\n\r\n    public products: Product[] = [];\r\n\r\n    constructor(private http: HttpClient) {\r\n\r\n    }\r\n\r\n    getProducts(): Observable<boolean> {\r\n        return this.http.get(\"/api/products\")\r\n            .pipe(\r\n                map((data: any[]) => {\r\n                    this.products = data;\r\n                    return true;\r\n                }));\r\n    }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}